{
  "name": "java",
  "displayName": "Language Support for Java(TM) by Red Hat",
  "description": "Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...",
  "author": "Red Hat",
  "icon": "icons/icon128.png",
  "license": "EPL-2.0",
  "version": "0.76.0",
  "publisher": "redhat",
  "bugs": "https://github.com/redhat-developer/vscode-java/issues",
  "preview": true,
  "enableProposedApi": false,
  "engines": {
    "vscode": "^1.47.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/redhat-developer/vscode-java"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Formatters",
    "Snippets"
  ],
  "keywords": [
    "multi-root ready"
  ],
  "activationEvents": [
    "onLanguage:java",
    "workspaceContains:pom.xml",
    "workspaceContains:build.gradle",
    "workspaceContains:.classpath",
    "onCommand:_java.templateVariables"
  ],
  "main": "./dist/extension",
  "contributes": {
    "semanticTokenTypes": [
      {
        "id": "annotation",
        "superType": "type",
        "description": "Style for annotations."
      },
      {
        "id": "annotationMember",
        "superType": "function",
        "description": "Style for annotation members."
      },
      {
        "id": "modifier",
        "superType": "keyword",
        "description": "Style for modifier keywords."
      }
    ],
    "semanticTokenModifiers": [
      {
        "id": "public",
        "description": "Style for symbols with the public access modifier."
      },
      {
        "id": "private",
        "description": "Style for symbols with the private access modifier."
      },
      {
        "id": "protected",
        "description": "Style for symbols with the protected access modifier."
      },
      {
        "id": "native",
        "description": "Style for symbols with the native modifier."
      },
      {
        "id": "generic",
        "description": "Style for symbols that are generic (have type parameters)."
      },
      {
        "id": "typeArgument",
        "description": "Style for symbols that are type arguments for a generic symbol."
      },
      {
        "id": "importDeclaration",
        "description": "Style for symbols that are part of an import declaration."
      }
    ],
    "semanticTokenScopes": [
      {
        "language": "java",
        "scopes": {
          "annotation": [
            "storage.type.annotation.java"
          ],
          "annotationMember": [
            "entity.name.annotationMember.java",
            "constant.other.key.java"
          ],
          "modifier": [
            "storage.modifier.java"
          ],
          "keyword.documentation": [
            "keyword.other.documentation.javadoc.java"
          ]
        }
      }
    ],
    "languages": [
      {
        "id": "java",
        "extensions": [
          ".java",
          ".class"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "snippets": [
      {
        "language": "java",
        "path": "./snippets/java.json"
      }
    ],
    "grammars": [
      {
        "language": "java",
        "scopeName": "source.java",
        "path": "./syntaxes/java.tmLanguage.json"
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "package.json",
        "url": "./schemas/package.schema.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Java",
      "properties": {
        "java.home": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Specifies the folder path to the JDK (11 or more recent) used to launch the Java Language Server.\nOn Windows, backslashes must be escaped, i.e.\n\"java.home\":\"C:\\\\Program Files\\\\Java\\\\jdk11.0_8\"",
          "scope": "machine-overridable"
        },
        "java.jdt.ls.vmargs": {
          "type": [
            "string",
            "null"
          ],
          "default": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m",
          "description": "Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m ` to optimize memory usage for container environments with the parallel garbage collector",
          "scope": "window"
        },
        "java.errors.incompleteClasspath.severity": {
          "type": [
            "string"
          ],
          "enum": [
            "ignore",
            "info",
            "warning",
            "error"
          ],
          "default": "warning",
          "description": "Specifies the severity of the message when the classpath is incomplete for a Java file",
          "scope": "window"
        },
        "java.configuration.checkProjectSettingsExclusions": {
          "type": "boolean",
          "default": true,
          "description": "Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.",
          "scope": "window"
        },
        "java.configuration.updateBuildConfiguration": {
          "type": [
            "string"
          ],
          "enum": [
            "disabled",
            "interactive",
            "automatic"
          ],
          "default": "interactive",
          "description": "Specifies how modifications on build files update the Java classpath/configuration",
          "scope": "window"
        },
        "java.trace.server": {
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the Java language server.",
          "scope": "window"
        },
        "java.import.maven.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable the Maven importer.",
          "scope": "window"
        },
        "java.import.gradle.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable the Gradle importer.",
          "scope": "window"
        },
        "java.import.gradle.wrapper.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Use Gradle from the 'gradle-wrapper.properties' file.",
          "scope": "window"
        },
        "java.import.gradle.version": {
          "type": "string",
          "default": null,
          "description": "Use Gradle from the specific version if the Gradle wrapper is missing or disabled.",
          "scope": "window"
        },
        "java.import.gradle.home": {
          "type": "string",
          "default": null,
          "description": "Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.",
          "scope": "window"
        },
        "java.import.gradle.java.home": {
          "type": "string",
          "default": null,
          "description": "The location to the JVM used to run the Gradle daemon.",
          "scope": "machine"
        },
        "java.import.gradle.offline.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable the Gradle offline mode.",
          "scope": "window"
        },
        "java.import.gradle.arguments": {
          "type": "string",
          "default": null,
          "description": "Arguments to pass to Gradle.",
          "scope": "machine"
        },
        "java.import.gradle.jvmArguments": {
          "type": "string",
          "default": null,
          "description": "JVM arguments to pass to Gradle.",
          "scope": "machine"
        },
        "java.import.gradle.user.home": {
          "type": "string",
          "default": null,
          "description": "Setting for GRADLE_USER_HOME.",
          "scope": "window"
        },
        "java.maven.downloadSources": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable download of Maven source artifacts as part of importing Maven projects.",
          "scope": "window"
        },
        "java.eclipse.downloadSources": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable download of Maven source artifacts for Eclipse projects.",
          "scope": "window"
        },
        "java.maven.updateSnapshots": {
          "type": "boolean",
          "default": false,
          "description": "Force update of Snapshots/Releases.",
          "scope": "window"
        },
        "java.referencesCodeLens.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable the references code lens.",
          "scope": "window"
        },
        "java.signatureHelp.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable the signature help.",
          "scope": "window"
        },
        "java.implementationsCodeLens.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable the implementations code lens.",
          "scope": "window"
        },
        "java.configuration.maven.userSettings": {
          "type": "string",
          "default": null,
          "description": "Path to Maven's user settings.xml",
          "scope": "window"
        },
        "java.configuration.maven.globalSettings": {
          "type": "string",
          "default": null,
          "description": "Path to Maven's global settings.xml",
          "scope": "window"
        },
        "java.format.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable default Java formatter",
          "scope": "window"
        },
        "java.saveActions.organizeImports": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable auto organize imports on save action",
          "scope": "window"
        },
        "java.import.exclusions": {
          "type": "array",
          "description": "Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.",
          "default": [
            "**/node_modules/**",
            "**/.metadata/**",
            "**/archetype-resources/**",
            "**/META-INF/maven/**"
          ],
          "scope": "window"
        },
        "java.project.referencedLibraries": {
          "type": [
            "array",
            "object"
          ],
          "description": "Configure glob patterns for referencing local libraries to a Java project.",
          "default": [
            "lib/**/*.jar"
          ],
          "properties": {
            "include": {
              "type": "array"
            },
            "exclude": {
              "type": "array"
            },
            "sources": {
              "type": "object"
            }
          },
          "required": [
            "include"
          ],
          "additionalProperties": false,
          "scope": "window"
        },
        "java.project.outputPath": {
          "type": [
            "string",
            "null"
          ],
          "markdownDescription": "A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project. ",
          "default": "",
          "scope": "window"
        },
        "java.contentProvider.preferred": {
          "type": "string",
          "description": "Preferred content provider (a 3rd party decompiler id, usually)",
          "default": null,
          "scope": "window"
        },
        "java.autobuild.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable the 'auto build'",
          "scope": "window"
        },
        "java.maxConcurrentBuilds": {
          "type": "integer",
          "default": 1,
          "description": "Max simultaneous project builds",
          "scope": "window",
          "minimum": 1
        },
        "java.recommendations.dependency.analytics.show": {
          "type": "boolean",
          "default": true,
          "description": "Show the recommended Dependency Analytics extension.",
          "scope": "window"
        },
        "java.completion.maxResults": {
          "type": "integer",
          "default": 0,
          "markdownDescription": "Maximum number of completion results (not including snippets).\n`0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.",
          "scope": "window"
        },
        "java.completion.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable code completion support",
          "scope": "window"
        },
        "java.completion.overwrite": {
          "type": "boolean",
          "default": true,
          "description": "When set to true, code completion overwrites the current text. When set to false, code is simply added instead.",
          "scope": "window"
        },
        "java.completion.guessMethodArguments": {
          "type": "boolean",
          "default": false,
          "description": "When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.",
          "scope": "window"
        },
        "java.completion.favoriteStaticMembers": {
          "type": "array",
          "description": "Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.",
          "default": [
            "org.junit.Assert.*",
            "org.junit.Assume.*",
            "org.junit.jupiter.api.Assertions.*",
            "org.junit.jupiter.api.Assumptions.*",
            "org.junit.jupiter.api.DynamicContainer.*",
            "org.junit.jupiter.api.DynamicTest.*",
            "org.mockito.Mockito.*",
            "org.mockito.ArgumentMatchers.*",
            "org.mockito.Answers.*"
          ],
          "scope": "window"
        },
        "java.completion.filteredTypes": {
          "type": "array",
          "description": "Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.",
          "default": [
            "java.awt.*",
            "com.sun.*",
            "sun.*"
          ],
          "scope": "window"
        },
        "java.completion.importOrder": {
          "type": "array",
          "description": "Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group.",
          "default": [
            "java",
            "javax",
            "com",
            "org"
          ],
          "scope": "window"
        },
        "java.foldingRange.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.",
          "scope": "window"
        },
        "java.progressReports.enabled": {
          "type": "boolean",
          "description": "[Experimental] Enable/disable progress reports from background processes on the server.",
          "default": true,
          "scope": "window"
        },
        "java.format.settings.url": {
          "type": "string",
          "markdownDescription": "Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).",
          "default": null,
          "scope": "window"
        },
        "java.format.settings.profile": {
          "type": "string",
          "description": "Optional formatter profile name from the Eclipse formatter settings.",
          "default": null,
          "scope": "window"
        },
        "java.format.comments.enabled": {
          "type": "boolean",
          "description": "Includes the comments during code formatting.",
          "default": true,
          "scope": "window"
        },
        "java.format.onType.enabled": {
          "type": "boolean",
          "description": "Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`",
          "default": true,
          "scope": "window"
        },
        "java.codeGeneration.hashCodeEquals.useJava7Objects": {
          "type": "boolean",
          "description": "Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.",
          "default": false,
          "scope": "window"
        },
        "java.codeGeneration.hashCodeEquals.useInstanceof": {
          "type": "boolean",
          "description": "Use 'instanceof' to compare types when generating the hashCode and equals methods.",
          "default": false,
          "scope": "window"
        },
        "java.codeGeneration.useBlocks": {
          "type": "boolean",
          "description": "Use blocks in 'if' statements when generating the methods.",
          "default": false,
          "scope": "window"
        },
        "java.codeGeneration.generateComments": {
          "type": "boolean",
          "description": "Generate method comments when generating the methods.",
          "default": false,
          "scope": "window"
        },
        "java.codeGeneration.toString.template": {
          "type": "string",
          "description": "The template for generating the toString method.",
          "default": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]"
        },
        "java.codeGeneration.toString.codeStyle": {
          "type": "string",
          "enum": [
            "STRING_CONCATENATION",
            "STRING_BUILDER",
            "STRING_BUILDER_CHAINED",
            "STRING_FORMAT"
          ],
          "enumDescriptions": [
            "String concatenation",
            "StringBuilder/StringBuffer",
            "StringBuilder/StringBuffer - chained call",
            "String.format/MessageFormat"
          ],
          "description": "The code style for generating the toString method.",
          "default": "STRING_CONCATENATION"
        },
        "java.codeGeneration.toString.skipNullValues": {
          "type": "boolean",
          "description": "Skip null values when generating the toString method.",
          "default": false,
          "scope": "window"
        },
        "java.codeGeneration.toString.listArrayContents": {
          "type": "boolean",
          "description": "List contents of arrays instead of using native toString().",
          "default": true,
          "scope": "window"
        },
        "java.codeGeneration.toString.limitElements": {
          "type": "integer",
          "description": "Limit number of items in arrays/collections/maps to list, if 0 then list all.",
          "default": 0,
          "scope": "window"
        },
        "java.selectionRange.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.",
          "scope": "window"
        },
        "java.showBuildStatusOnStart.enabled": {
          "type": "boolean",
          "description": "Automatically show build status on startup.",
          "default": false,
          "scope": "window"
        },
        "java.configuration.runtimes": {
          "type": "array",
          "description": "Map Java Execution Environments to local JDKs.",
          "items": {
            "type": "object",
            "default": {},
            "required": [
              "path",
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "J2SE-1.5",
                  "JavaSE-1.6",
                  "JavaSE-1.7",
                  "JavaSE-1.8",
                  "JavaSE-9",
                  "JavaSE-10",
                  "JavaSE-11",
                  "JavaSE-12",
                  "JavaSE-13",
                  "JavaSE-14",
                  "JavaSE-15"
                ],
                "description": "Java Execution Environment name. Must be unique."
              },
              "path": {
                "type": "string",
                "pattern": ".*(?<!\\/bin|\\/bin\\/|\\\\bin|\\\\bin\\\\)$",
                "description": "JDK home path. Should be the JDK installation directory, not the Java bin path.\n On Windows, backslashes must be escaped, i.e.\n\"path\":\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_161\"."
              },
              "sources": {
                "type": "string",
                "description": "JDK sources path."
              },
              "javadoc": {
                "type": "string",
                "description": "JDK javadoc path."
              },
              "default": {
                "type": "boolean",
                "description": "Is default runtime? Only one runtime can be default."
              }
            },
            "additionalProperties": false
          },
          "default": [],
          "scope": "machine"
        },
        "java.server.launchMode": {
          "type": "string",
          "enum": [
            "Standard",
            "LightWeight",
            "Hybrid"
          ],
          "enumDescriptions": [
            "Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.",
            "Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.",
            "Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready."
          ],
          "description": "The launch mode for the Java extension",
          "default": "Hybrid",
          "scope": "window"
        },
        "java.sources.organizeImports.starThreshold": {
          "type": "integer",
          "description": "Specifies the number of imports added before a star-import declaration is used.",
          "default": 99,
          "scope": "window"
        },
        "java.sources.organizeImports.staticStarThreshold": {
          "type": "integer",
          "description": "Specifies the number of static imports added before a star-import declaration is used.",
          "default": 99
        },
        "java.semanticHighlighting.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable the semantic highlighting.",
          "scope": "window"
        },
        "java.refactor.renameFromFileExplorer": {
          "type": "string",
          "enum": [
            "never",
            "autoApply",
            "preview",
            "prompt"
          ],
          "enumDescriptions": [
            "Don't enable refactoring for rename operations on File Explorer.",
            "Always automatically update the imports and package declarations.",
            "Always preview the changes before applying.",
            "Ask user to confirm whether to bypass refactor preview."
          ],
          "description": "Specifies whether to update imports and package declarations when renaming files from File Explorer.",
          "default": "prompt",
          "scope": "window"
        },
        "java.imports.gradle.wrapper.checksums": {
          "type": "array",
          "items": {
            "type": "object",
            "default": {},
            "required": [
              "sha256"
            ],
            "properties": {
              "sha256": {
                "type": "string",
                "label": "SHA-256 checksum."
              },
              "allowed": {
                "type": "boolean",
                "default": true,
                "label": "Is allowed?"
              }
            },
            "additionalProperties": false,
            "uniqueItems": true
          },
          "description": "Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers",
          "default": [],
          "scope": "application"
        },
        "java.project.importOnFirstTimeStartup": {
          "type": "string",
          "enum": [
            "disabled",
            "interactive",
            "automatic"
          ],
          "default": "interactive",
          "description": "Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.",
          "scope": "application"
        },
        "java.project.importHint": {
          "type": "boolean",
          "description": "Enable/disable the server-mode switch information, when Java projects import is skipped on startup.",
          "default": true,
          "scope": "application"
        },
        "java.project.resourceFilters": {
          "type": "array",
          "default": [
            "node_modules",
            ".git"
          ],
          "description": "Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, [\"node_modules\",\".git\"] will exclude all files and folders named 'node_modules' or '.git'. Defaults to [\"node_modules\",\".git\"].",
          "scope": "window"
        },
        "java.templates.fileHeader": {
          "type": "array",
          "markdownDescription": "Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).",
          "scope": "window",
          "default": []
        },
        "java.templates.typeComment": {
          "type": "array",
          "markdownDescription": "Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).",
          "scope": "window",
          "default": []
        },
        "java.references.includeAccessors": {
          "type": "boolean",
          "default": true,
          "description": "Include getter, setter and builder/constructor when finding references.",
          "scope": "window"
        }
      }
    },
    "configurationDefaults": {
      "[java]": {
        "editor.suggest.snippetsPreventQuickSuggestions": false
      }
    },
    "commands": [
      {
        "command": "java.server.mode.switch",
        "title": "Switch to Standard Mode",
        "category": "Java"
      },
      {
        "command": "java.projectConfiguration.update",
        "title": "Update Project",
        "category": "Java"
      },
      {
        "command": "java.project.import",
        "title": "Import Java Projects into Workspace",
        "category": "Java"
      },
      {
        "command": "java.open.serverLog",
        "title": "Open Java Language Server Log File",
        "category": "Java"
      },
      {
        "command": "java.open.clientLog",
        "title": "Open Java Extension Log File",
        "category": "Java"
      },
      {
        "command": "java.open.logs",
        "title": "Open All Log Files",
        "category": "Java"
      },
      {
        "command": "java.workspace.compile",
        "title": "Force Java Compilation",
        "category": "Java"
      },
      {
        "command": "java.open.formatter.settings",
        "title": "Open Java Formatter Settings",
        "category": "Java"
      },
      {
        "command": "java.clean.workspace",
        "title": "Clean Java Language Server Workspace",
        "category": "Java"
      },
      {
        "command": "java.project.updateSourceAttachment",
        "title": "Attach Source",
        "category": "Java"
      },
      {
        "command": "java.project.addToSourcePath",
        "title": "Add Folder to Java Source Path",
        "category": "Java"
      },
      {
        "command": "java.project.removeFromSourcePath",
        "title": "Remove Folder from Java Source Path",
        "category": "Java"
      },
      {
        "command": "java.project.listSourcePaths",
        "title": "List All Java Source Paths",
        "category": "Java"
      },
      {
        "command": "java.show.server.task.status",
        "title": "Show Build Job Status",
        "category": "Java"
      },
      {
        "command": "java.action.navigateToSuperImplementation",
        "title": "Go to Super Implementation",
        "category": "Java"
      }
    ],
    "keybindings": [
      {
        "command": "java.projectConfiguration.update",
        "key": "shift+alt+u",
        "when": "editorFocus"
      },
      {
        "command": "java.workspace.compile",
        "key": "shift+alt+b"
      },
      {
        "command": "java.action.clipboardPasteAction",
        "key": "ctrl+shift+v",
        "mac": "cmd+shift+v",
        "when": "javaLSReady && editorLangId == java"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "java.projectConfiguration.update",
          "when": "resourceFilename =~ /(.*\\.gradle)|(pom.xml)$/",
          "group": "1_javaactions"
        },
        {
          "when": "explorerResourceIsFolder&&javaLSReady",
          "command": "java.project.addToSourcePath",
          "group": "1_javaactions@1"
        },
        {
          "when": "explorerResourceIsFolder&&javaLSReady",
          "command": "java.project.removeFromSourcePath",
          "group": "1_javaactions@2"
        }
      ],
      "editor/context": [
        {
          "command": "java.project.updateSourceAttachment",
          "when": "editorReadonly && editorLangId == java",
          "group": "1_javaactions"
        },
        {
          "command": "java.projectConfiguration.update",
          "when": "resourceFilename =~ /(.*\\.gradle)|(pom.xml)$/",
          "group": "1_javaactions"
        },
        {
          "command": "java.action.navigateToSuperImplementation",
          "when": "javaLSReady && editorTextFocus && editorLangId == java",
          "group": "navigation@90"
        }
      ],
      "commandPalette": [
        {
          "command": "java.projectConfiguration.update",
          "when": "javaLSReady"
        },
        {
          "command": "java.project.import",
          "when": "javaLSReady"
        },
        {
          "command": "java.action.navigateToSuperImplementation",
          "when": "javaLSReady && editorLangId == java"
        },
        {
          "command": "java.workspace.compile",
          "when": "javaLSReady"
        },
        {
          "command": "java.project.listSourcePaths",
          "when": "javaLSReady"
        },
        {
          "command": "java.project.updateSourceAttachment",
          "when": "false"
        },
        {
          "command": "java.project.addToSourcePath",
          "when": "false"
        },
        {
          "command": "java.project.removeFromSourcePath",
          "when": "false"
        },
        {
          "command": "java.show.server.task.status",
          "when": "java:serverMode != LightWeight"
        },
        {
          "command": "java.server.mode.switch",
          "when": "java:serverMode == LightWeight"
        }
      ]
    }
  },
  "resolutions": {
    "minimist": "^1.2.5",
    "yargs-parser": "^18.1.2"
  },
  "scripts": {
    "preinstall": "npx npm-force-resolutions",
    "vscode:prepublish": "webpack --mode production",
    "compile": "tsc -p ./&webpack --mode development",
    "watch": "webpack --mode development --watch --info-verbosity verbose",
    "pretest": "npm run compile",
    "test": "node ./out/test/runtest.js",
    "build-server": "./node_modules/.bin/gulp build_server",
    "watch-server": "./node_modules/.bin/gulp watch_server",
    "tslint": "tslint -p ."
  },
  "devDependencies": {
    "@types/fs-extra": "^8.0.0",
    "@types/glob": "5.0.30",
    "@types/lodash.findindex": "^4.6.6",
    "@types/mocha": "^5.2.5",
    "@types/node": "^8.10.51",
    "@types/vscode": "^1.47.0",
    "@types/winreg": "^1.2.30",
    "@types/winston": "^2.4.4",
    "gulp": "^4.0.2",
    "gulp-decompress": "^3.0.0",
    "gulp-download": "0.0.1",
    "lodash.findindex": "^4.6.0",
    "lodash.template": ">=4.5.0",
    "minimist": ">=1.2.5",
    "mocha": "^8.1.1",
    "ts-loader": "^5.3.1",
    "tslint": "^5.11.0",
    "typescript": "^3.7.3",
    "typescript-tslint-plugin": "^0.3.1",
    "vscode-test": "^1.4.0",
    "webpack": "^4.44.1",
    "webpack-cli": "^3.3.11"
  },
  "dependencies": {
    "expand-home-dir": "^0.0.3",
    "find-java-home": "1.1.0",
    "fmtr": "^1.1.2",
    "fs-extra": "^8.1.0",
    "glob": "^7.1.3",
    "vscode-languageclient": "6.0.0-next.9",
    "winreg-utf8": "^0.1.1",
    "winston": "^3.2.1",
    "winston-daily-rotate-file": "^3.10.0"
  }
}
