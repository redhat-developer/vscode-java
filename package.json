{
  "name": "java",
  "displayName": "Language Support for Java(TM) by Red Hat",
  "description": "Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...",
  "author": "Red Hat",
  "icon": "icons/icon128.png",
  "license": "EPL-2.0",
  "version": "0.56.0",
  "publisher": "redhat",
  "bugs": "https://github.com/redhat-developer/vscode-java/issues",
  "preview": true,
  "enableProposedApi": false,
  "engines": {
    "vscode": "^1.41.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/redhat-developer/vscode-java"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Formatters",
    "Snippets"
  ],
  "keywords": [
    "multi-root ready"
  ],
  "activationEvents": [
    "onLanguage:java",
    "workspaceContains:pom.xml",
    "workspaceContains:build.gradle",
    "workspaceContains:.classpath"
  ],
  "main": "./dist/extension",
  "contributes": {
    "languages": [
      {
        "id": "java",
        "extensions": [
          ".class"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "snippets": [
      {
        "language": "java",
        "path": "./snippets/java.json"
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "package.json",
        "url": "./schemas/package.schema.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Java configuration",
      "properties": {
        "java.home": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Specifies the folder path to the JDK (8 or more recent) used to launch the Java Language Server.\nOn Windows, backslashes must be escaped, i.e.\n\"java.home\":\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_161\"",
          "scope": "window"
        },
        "java.jdt.ls.vmargs": {
          "type": [
            "string",
            "null"
          ],
          "default": "-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication",
          "description": "Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-noverify -Xmx1G  -XX:+UseG1GC -XX:+UseStringDeduplication` to bypass class verification, increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector",
          "scope": "window"
        },
        "java.errors.incompleteClasspath.severity": {
          "type": [
            "string"
          ],
          "enum": [
            "ignore",
            "info",
            "warning",
            "error"
          ],
          "default": "warning",
          "description": "Specifies the severity of the message when the classpath is incomplete for a Java file",
          "scope": "window"
        },
        "java.configuration.checkProjectSettingsExclusions": {
          "type": "boolean",
          "default": true,
          "description": "Checks if the extension-generated project settings files (.project, .classpath, .factorypath, .settings/) should be excluded from the file explorer.",
          "scope": "window"
        },
        "java.configuration.updateBuildConfiguration": {
          "type": [
            "string"
          ],
          "enum": [
            "disabled",
            "interactive",
            "automatic"
          ],
          "default": "interactive",
          "description": "Specifies how modifications on build files update the Java classpath/configuration",
          "scope": "window"
        },
        "java.trace.server": {
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the Java language server.",
          "scope": "window"
        },
        "java.import.maven.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable the Maven importer.",
          "scope": "window"
        },
        "java.import.gradle.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable the Gradle importer.",
          "scope": "window"
        },
        "java.import.gradle.wrapper.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable the Gradle wrapper.",
          "scope": "window"
        },
        "java.import.gradle.offline.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable the Gradle offline mode.",
          "scope": "window"
        },
        "java.import.gradle.version": {
          "type": "string",
          "default": null,
          "description": "Gradle version, used if the gradle wrapper is missing or disabled.",
          "scope": "window"
        },
        "java.import.gradle.arguments": {
          "type": "string",
          "default": null,
          "description": "Arguments to pass to Gradle.",
          "scope": "window"
        },
        "java.import.gradle.jvmArguments": {
          "type": "string",
          "default": null,
          "description": "JVM arguments to pass to Gradle.",
          "scope": "window"
        },
        "java.import.gradle.home": {
          "type": "string",
          "default": null,
          "description": "Setting for GRADLE_HOME.",
          "scope": "window"
        },
        "java.maven.downloadSources": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable eager download of Maven source artifacts.",
          "scope": "window"
        },
        "java.maven.updateSnapshots": {
          "type": "boolean",
          "default": false,
          "description": "Force update of Snapshots/Releases.",
          "scope": "window"
        },
        "java.referencesCodeLens.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable the references code lens.",
          "scope": "window"
        },
        "java.signatureHelp.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable the signature help.",
          "scope": "window"
        },
        "java.implementationsCodeLens.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable the implementations code lens.",
          "scope": "window"
        },
        "java.configuration.maven.userSettings": {
          "type": "string",
          "default": null,
          "description": "Path to Maven's settings.xml",
          "scope": "window"
        },
        "java.format.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable default Java formatter",
          "scope": "window"
        },
        "java.saveActions.organizeImports": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable auto organize imports on save action",
          "scope": "window"
        },
        "java.import.exclusions": {
          "type": "array",
          "description": "Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.",
          "default": [
            "**/node_modules/**",
            "**/.metadata/**",
            "**/archetype-resources/**",
            "**/META-INF/maven/**"
          ],
          "scope": "window"
        },
        "java.project.referencedLibraries": {
          "type": [
            "array",
            "object"
          ],
          "description": "Configure glob patterns for referencing local libraries to a Java project.",
          "default": [
            "lib/**/*.jar"
          ],
          "properties": {
            "include": {
              "type": "array"
            },
            "exclude": {
              "type": "array"
            },
            "sources": {
              "type": "object"
            }
          },
          "required": [
            "include"
          ],
          "additionalProperties": false,
          "scope": "window"
        },
        "java.contentProvider.preferred": {
          "type": "string",
          "description": "Preferred content provider (a 3rd party decompiler id, usually)",
          "default": null,
          "scope": "window"
        },
        "java.autobuild.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable the 'auto build'",
          "scope": "window"
        },
        "java.maxConcurrentBuilds": {
          "type": "integer",
          "default": 1,
          "description": "Max simultaneous project builds",
          "scope": "window",
          "minimum": 1
        },
        "java.completion.maxResults": {
          "type": "integer",
          "default": 50,
          "description": "Maximum number of completion results (not including snippets).\nSetting 0 will disable the limit and return all results. Be aware the performance will be very negatively impacted.",
          "scope": "window"
        },
        "java.completion.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable code completion support",
          "scope": "window"
        },
        "java.completion.overwrite": {
          "type": "boolean",
          "default": true,
          "description": "When set to true, code completion overwrites the current text. When set to false, code is simply added instead.",
          "scope": "window"
        },
        "java.completion.guessMethodArguments": {
          "type": "boolean",
          "default": false,
          "description": "When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.",
          "scope": "window"
        },
        "java.completion.favoriteStaticMembers": {
          "type": "array",
          "description": "Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.",
          "default": [
            "org.junit.Assert.*",
            "org.junit.Assume.*",
            "org.junit.jupiter.api.Assertions.*",
            "org.junit.jupiter.api.Assumptions.*",
            "org.junit.jupiter.api.DynamicContainer.*",
            "org.junit.jupiter.api.DynamicTest.*",
            "org.mockito.Mockito.*",
            "org.mockito.ArgumentMatchers.*",
            "org.mockito.Answers.*"
          ],
          "scope": "window"
        },
        "java.completion.filteredTypes": {
          "type": "array",
          "description": "Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.",
          "default": [
            "java.awt.*",
            "com.sun.*"
          ],
          "scope": "window"
        },
        "java.completion.importOrder": {
          "type": "array",
          "description": "Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group.",
          "default": [
            "java",
            "javax",
            "com",
            "org"
          ],
          "scope": "window"
        },
        "java.foldingRange.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.",
          "scope": "window"
        },
        "java.progressReports.enabled": {
          "type": "boolean",
          "description": "[Experimental] Enable/disable progress reports from background processes on the server.",
          "default": true,
          "scope": "window"
        },
        "java.format.settings.url": {
          "type": "string",
          "description": "Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).",
          "default": null,
          "scope": "window"
        },
        "java.format.settings.profile": {
          "type": "string",
          "description": "Optional formatter profile name from the Eclipse formatter settings.",
          "default": null,
          "scope": "window"
        },
        "java.format.comments.enabled": {
          "type": "boolean",
          "description": "Includes the comments during code formatting.",
          "default": true,
          "scope": "window"
        },
        "java.format.onType.enabled": {
          "type": "boolean",
          "description": "Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`",
          "default": true,
          "scope": "window"
        },
        "java.codeGeneration.hashCodeEquals.useJava7Objects": {
          "type": "boolean",
          "description": "Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.",
          "default": false,
          "scope": "window"
        },
        "java.codeGeneration.hashCodeEquals.useInstanceof": {
          "type": "boolean",
          "description": "Use 'instanceof' to compare types when generating the hashCode and equals methods.",
          "default": false,
          "scope": "window"
        },
        "java.codeGeneration.useBlocks": {
          "type": "boolean",
          "description": "Use blocks in 'if' statements when generating the methods.",
          "default": false,
          "scope": "window"
        },
        "java.codeGeneration.generateComments": {
          "type": "boolean",
          "description": "Generate method comments when generating the methods.",
          "default": false,
          "scope": "window"
        },
        "java.codeGeneration.toString.template": {
          "type": "string",
          "description": "The template for generating the toString method.",
          "default": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]"
        },
        "java.codeGeneration.toString.codeStyle": {
          "type": "string",
          "enum": [
            "STRING_CONCATENATION",
            "STRING_BUILDER",
            "STRING_BUILDER_CHAINED",
            "STRING_FORMAT"
          ],
          "enumDescriptions": [
            "String concatenation",
            "StringBuilder/StringBuffer",
            "StringBuilder/StringBuffer - chained call",
            "String.format/MessageFormat"
          ],
          "description": "The code style for generating the toString method.",
          "default": "STRING_CONCATENATION"
        },
        "java.codeGeneration.toString.skipNullValues": {
          "type": "boolean",
          "description": "Skip null values when generating the toString method.",
          "default": false,
          "scope": "window"
        },
        "java.codeGeneration.toString.listArrayContents": {
          "type": "boolean",
          "description": "List contents of arrays instead of using native toString().",
          "default": true,
          "scope": "window"
        },
        "java.codeGeneration.toString.limitElements": {
          "type": "integer",
          "description": "Limit number of items in arrays/collections/maps to list, if 0 then list all.",
          "default": 0,
          "scope": "window"
        },
        "java.selectionRange.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.",
          "scope": "window"
        },
        "java.showBuildStatusOnStart.enabled": {
          "type": "boolean",
          "description": "Automatically show build status on startup.",
          "default": false,
          "scope": "window"
        },
        "java.configuration.runtimes": {
          "type": "array",
          "label": "Java Execution Environments.",
          "items": {
            "type": "object",
            "default": {},
            "required": [
              "path",
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "J2SE-1.5",
                  "JavaSE-1.6",
                  "JavaSE-1.7",
                  "JavaSE-1.8",
                  "JavaSE-9",
                  "JavaSE-10",
                  "JavaSE-11",
                  "JavaSE-12",
                  "JavaSE-13"
                ],
                "label": "Java Execution Environment name. Must be unique"
              },
              "path": {
                "type": "string",
                "label": "JDK path.\nOn Windows, backslashes must be escaped, i.e.\n\"path\":\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_161\""
              },
              "sources": {
                "type": "string",
                "label": "JDK sources."
              },
              "javadoc": {
                "type": "string",
                "label": "JDK javadoc."
              },
              "default": {
                "type": "boolean",
                "label": "Is default runtime? Only one runtime can be default."
              }
            },
            "additionalProperties": false
          },
          "default": [],
          "description": "Java Execution Environments -> Runtimes.",
          "scope": "machine"
        }
      }
    },
    "commands": [
      {
        "command": "java.projectConfiguration.update",
        "title": "Update project configuration",
        "category": "Java"
      },
      {
        "command": "java.open.serverLog",
        "title": "Open Java language server log file",
        "category": "Java"
      },
      {
        "command": "java.open.clientLog",
        "title": "Open Java extension log file",
        "category": "Java"
      },
      {
        "command": "java.open.logs",
        "title": "Open all log files",
        "category": "Java"
      },
      {
        "command": "java.workspace.compile",
        "title": "Force Java compilation",
        "category": "Java"
      },
      {
        "command": "java.open.formatter.settings",
        "title": "Open Java formatter settings",
        "category": "Java"
      },
      {
        "command": "java.clean.workspace",
        "title": "Clean the Java language server workspace",
        "category": "Java"
      },
      {
        "command": "java.project.updateSourceAttachment",
        "title": "Attach Source",
        "category": "Java"
      },
      {
        "command": "java.project.addToSourcePath",
        "title": "Add Folder to Java Source Path",
        "category": "Java"
      },
      {
        "command": "java.project.removeFromSourcePath",
        "title": "Remove Folder from Java Source Path",
        "category": "Java"
      },
      {
        "command": "java.project.listSourcePaths",
        "title": "List all Java source paths",
        "category": "Java"
      },
      {
        "command": "java.show.server.task.status",
        "title": "Show Build Job Status",
        "category": "Java"
      }
    ],
    "keybindings": [
      {
        "command": "java.projectConfiguration.update",
        "key": "shift+alt+u",
        "when": "editorFocus"
      },
      {
        "command": "java.workspace.compile",
        "key": "shift+alt+b"
      },
      {
        "command": "java.action.clipboardPasteAction",
        "key": "ctrl+shift+v",
        "mac": "cmd+shift+v",
        "when": "javaLSReady && editorLangId == java"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "java.projectConfiguration.update",
          "when": "resourceFilename =~ /(.*\\.gradle)|(pom.xml)$/",
          "group": "1_javaactions"
        },
        {
          "when": "explorerResourceIsFolder&&javaLSReady",
          "command": "java.project.addToSourcePath",
          "group": "1_javaactions@1"
        },
        {
          "when": "explorerResourceIsFolder&&javaLSReady",
          "command": "java.project.removeFromSourcePath",
          "group": "1_javaactions@2"
        }
      ],
      "editor/context": [
        {
          "command": "java.project.updateSourceAttachment",
          "when": "editorReadonly && editorLangId == java",
          "group": "1_javaactions"
        },
        {
          "command": "java.projectConfiguration.update",
          "when": "resourceFilename =~ /(.*\\.gradle)|(pom.xml)$/",
          "group": "1_javaactions"
        }
      ],
      "commandPalette": [
        {
          "command": "java.projectConfiguration.update",
          "when": "javaLSReady"
        },
        {
          "command": "java.workspace.compile",
          "when": "javaLSReady"
        },
        {
          "command": "java.project.listSourcePaths",
          "when": "javaLSReady"
        },
        {
          "command": "java.project.updateSourceAttachment",
          "when": "false"
        },
        {
          "command": "java.project.addToSourcePath",
          "when": "false"
        },
        {
          "command": "java.project.removeFromSourcePath",
          "when": "false"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "webpack --mode production",
    "compile": "tsc -p ./&webpack --mode development",
    "watch": "webpack --mode development --watch --info-verbosity verbose",
    "pretest": "npm run compile",
    "test": "node ./out/test/runtest.js",
    "build-server": "./node_modules/.bin/gulp build_server",
    "watch-server": "./node_modules/.bin/gulp watch_server",
    "tslint": "tslint -p ."
  },
  "devDependencies": {
    "@types/fs-extra": "^8.0.0",
    "@types/glob": "5.0.30",
    "@types/lodash.findindex": "^4.6.6",
    "@types/mocha": "^5.2.5",
    "@types/node": "^8.10.51",
    "@types/vscode": "^1.41.0",
    "@types/winston": "^2.4.4",
    "gulp": "^4.0.0",
    "gulp-decompress": "2.0.1",
    "gulp-download": "0.0.1",
    "lodash.findindex": "^4.6.0",
    "lodash.template": ">=4.5.0",
    "mocha": "^5.2.0",
    "ts-loader": "^5.3.1",
    "tslint": "^5.11.0",
    "typescript": "^3.7.3",
    "typescript-tslint-plugin": "^0.3.1",
    "vscode-test": "^1.3.0",
    "webpack": "^4.27.1",
    "webpack-cli": "^3.1.2"
  },
  "dependencies": {
    "vscode-languageclient": "6.0.0-next.9",
    "find-java-home": "1.1.0",
    "expand-home-dir": "^0.0.3",
    "fs-extra": "^8.1.0",
    "glob": "^7.1.3",
    "winston": "^3.2.1",
    "winston-daily-rotate-file": "^3.10.0"
  }
}
